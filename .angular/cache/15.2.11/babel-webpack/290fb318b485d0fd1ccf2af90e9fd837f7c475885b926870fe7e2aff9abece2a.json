{"ast":null,"code":"import { HEROES } from './mock-heroes'; // Importa el arreglo HEROES desde mock-heroes.ts\nimport { of } from 'rxjs'; // Importa Observable y of desde rxjs para manejar observables\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n  constructor(messageService) {\n    this.messageService = messageService;\n  } // Constructor que recibe MessageService como inyección de dependencias\n  getHeroes() {\n    const heroes = of(HEROES); // Crea un observable de héroes a partir del arreglo HEROES\n    this.messageService.add('HeroService: fetched heroes'); // Agrega un mensaje al servicio de mensajes\n    return heroes; // Devuelve el observable de héroes\n  }\n\n  getHero(id) {\n    const hero = HEROES.find(h => h.id === id); // Encuentra el héroe con el id especificado en el arreglo HEROES\n    this.messageService.add(`HeroService: fetched hero id=${id}`); // Agrega un mensaje al servicio de mensajes\n    return of(hero); // Devuelve un observable del héroe encontrado\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root' // Proporciona este servicio en el nivel raíz del inyector Angular\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,MAAM,QAAQ,eAAe,CAAC,CAAC;AACxC,SAAqBC,EAAE,QAAQ,MAAM,CAAC,CAAC;;;AAMvC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB,CAAC,CAAC;EAExDC,SAAS;IACP,MAAMC,MAAM,GAAGL,EAAE,CAACD,MAAM,CAAC,CAAC,CAAC;IAC3B,IAAI,CAACI,cAAc,CAACG,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;IACxD,OAAOD,MAAM,CAAC,CAAC;EACjB;;EAEAE,OAAO,CAACC,EAAU;IAChB,MAAMC,IAAI,GAAGV,MAAM,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE,CAAC,CAAC;IAC7C,IAAI,CAACL,cAAc,CAACG,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/D,OAAOR,EAAE,CAACS,IAAI,CAAC,CAAC,CAAC;EACnB;EAAC;qBAdUR,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAW,SAAXX,WAAW;IAAAY,YAFV,MAAM,CAAC","names":["HEROES","of","HeroService","constructor","messageService","getHeroes","heroes","add","getHero","id","hero","find","h","factory","providedIn"],"sourceRoot":"","sources":["/home/live/desarrolloweb2/angular/Proyecto/src/app/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core'; // Importa Injectable desde @angular/core para definir un servicio inyectable\nimport { Hero } from './hero'; // Importa la interfaz Hero desde hero.ts\nimport { HEROES } from './mock-heroes'; // Importa el arreglo HEROES desde mock-heroes.ts\nimport { Observable, of } from 'rxjs'; // Importa Observable y of desde rxjs para manejar observables\nimport { MessageService } from './message.service'; // Importa MessageService desde message.service.ts para enviar mensajes\n\n@Injectable({ // Decorador Injectable para marcar la clase como un servicio inyectable\n  providedIn: 'root' // Proporciona este servicio en el nivel raíz del inyector Angular\n})\nexport class HeroService { // Definición de la clase HeroService\n\n  constructor(private messageService: MessageService) { } // Constructor que recibe MessageService como inyección de dependencias\n\n  getHeroes(): Observable<Hero[]> { // Método para obtener todos los héroes\n    const heroes = of(HEROES); // Crea un observable de héroes a partir del arreglo HEROES\n    this.messageService.add('HeroService: fetched heroes'); // Agrega un mensaje al servicio de mensajes\n    return heroes; // Devuelve el observable de héroes\n  }\n\n  getHero(id: number): Observable<Hero> { // Método para obtener un héroe por su id\n    const hero = HEROES.find(h => h.id === id)!; // Encuentra el héroe con el id especificado en el arreglo HEROES\n    this.messageService.add(`HeroService: fetched hero id=${id}`); // Agrega un mensaje al servicio de mensajes\n    return of(hero); // Devuelve un observable del héroe encontrado\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}